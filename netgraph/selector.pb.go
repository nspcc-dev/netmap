// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: netgraph/selector.proto

package netgraph

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Operation int32

const (
	Operation_NP  Operation = 0
	Operation_EQ  Operation = 1
	Operation_NE  Operation = 2
	Operation_GT  Operation = 3
	Operation_GE  Operation = 4
	Operation_LT  Operation = 5
	Operation_LE  Operation = 6
	Operation_OR  Operation = 7
	Operation_AND Operation = 8
)

var Operation_name = map[int32]string{
	0: "NP",
	1: "EQ",
	2: "NE",
	3: "GT",
	4: "GE",
	5: "LT",
	6: "LE",
	7: "OR",
	8: "AND",
}
var Operation_value = map[string]int32{
	"NP":  0,
	"EQ":  1,
	"NE":  2,
	"GT":  3,
	"GE":  4,
	"LT":  5,
	"LE":  6,
	"OR":  7,
	"AND": 8,
}

func (x Operation) String() string {
	return proto.EnumName(Operation_name, int32(x))
}
func (Operation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_selector_5adf71ef05f878ed, []int{0}
}

type Type int32

const (
	Type_String  Type = 0
	Type_Integer Type = 1
)

var Type_name = map[int32]string{
	0: "String",
	1: "Integer",
}
var Type_value = map[string]int32{
	"String":  0,
	"Integer": 1,
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}
func (Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_selector_5adf71ef05f878ed, []int{1}
}

type PlacementRule struct {
	ReplFactor           int32     `protobuf:"varint,1,opt,name=ReplFactor,json=replFactor,proto3" json:"ReplFactor,omitempty"`
	SFGroups             []SFGroup `protobuf:"bytes,2,rep,name=SFGroups,json=sFGroups" json:"SFGroups"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *PlacementRule) Reset()         { *m = PlacementRule{} }
func (m *PlacementRule) String() string { return proto.CompactTextString(m) }
func (*PlacementRule) ProtoMessage()    {}
func (*PlacementRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_selector_5adf71ef05f878ed, []int{0}
}
func (m *PlacementRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlacementRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlacementRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PlacementRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlacementRule.Merge(dst, src)
}
func (m *PlacementRule) XXX_Size() int {
	return m.Size()
}
func (m *PlacementRule) XXX_DiscardUnknown() {
	xxx_messageInfo_PlacementRule.DiscardUnknown(m)
}

var xxx_messageInfo_PlacementRule proto.InternalMessageInfo

func (m *PlacementRule) GetReplFactor() int32 {
	if m != nil {
		return m.ReplFactor
	}
	return 0
}

func (m *PlacementRule) GetSFGroups() []SFGroup {
	if m != nil {
		return m.SFGroups
	}
	return nil
}

type SFGroup struct {
	Filters              []Filter `protobuf:"bytes,1,rep,name=Filters,json=filters" json:"Filters"`
	Selectors            []Select `protobuf:"bytes,2,rep,name=Selectors,json=selectors" json:"Selectors"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SFGroup) Reset()         { *m = SFGroup{} }
func (m *SFGroup) String() string { return proto.CompactTextString(m) }
func (*SFGroup) ProtoMessage()    {}
func (*SFGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_selector_5adf71ef05f878ed, []int{1}
}
func (m *SFGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SFGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SFGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SFGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SFGroup.Merge(dst, src)
}
func (m *SFGroup) XXX_Size() int {
	return m.Size()
}
func (m *SFGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_SFGroup.DiscardUnknown(m)
}

var xxx_messageInfo_SFGroup proto.InternalMessageInfo

func (m *SFGroup) GetFilters() []Filter {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *SFGroup) GetSelectors() []Select {
	if m != nil {
		return m.Selectors
	}
	return nil
}

type Select struct {
	Count                int32    `protobuf:"varint,1,opt,name=Count,json=count,proto3" json:"Count,omitempty"`
	Key                  string   `protobuf:"bytes,2,opt,name=Key,json=key,proto3" json:"Key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Select) Reset()         { *m = Select{} }
func (m *Select) String() string { return proto.CompactTextString(m) }
func (*Select) ProtoMessage()    {}
func (*Select) Descriptor() ([]byte, []int) {
	return fileDescriptor_selector_5adf71ef05f878ed, []int{2}
}
func (m *Select) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Select) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Select.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Select) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Select.Merge(dst, src)
}
func (m *Select) XXX_Size() int {
	return m.Size()
}
func (m *Select) XXX_DiscardUnknown() {
	xxx_messageInfo_Select.DiscardUnknown(m)
}

var xxx_messageInfo_Select proto.InternalMessageInfo

func (m *Select) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Select) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type SimpleFilters struct {
	Filters              []*SimpleFilter `protobuf:"bytes,1,rep,name=Filters,json=filters" json:"Filters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SimpleFilters) Reset()         { *m = SimpleFilters{} }
func (m *SimpleFilters) String() string { return proto.CompactTextString(m) }
func (*SimpleFilters) ProtoMessage()    {}
func (*SimpleFilters) Descriptor() ([]byte, []int) {
	return fileDescriptor_selector_5adf71ef05f878ed, []int{3}
}
func (m *SimpleFilters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimpleFilters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimpleFilters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SimpleFilters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleFilters.Merge(dst, src)
}
func (m *SimpleFilters) XXX_Size() int {
	return m.Size()
}
func (m *SimpleFilters) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleFilters.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleFilters proto.InternalMessageInfo

func (m *SimpleFilters) GetFilters() []*SimpleFilter {
	if m != nil {
		return m.Filters
	}
	return nil
}

type SimpleFilter struct {
	Op Operation `protobuf:"varint,1,opt,name=Op,json=op,proto3,enum=netgraph.Operation" json:"Op,omitempty"`
	// Types that are valid to be assigned to Args:
	//	*SimpleFilter_Value
	//	*SimpleFilter_FArgs
	Args                 isSimpleFilter_Args `protobuf_oneof:"Args"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SimpleFilter) Reset()         { *m = SimpleFilter{} }
func (m *SimpleFilter) String() string { return proto.CompactTextString(m) }
func (*SimpleFilter) ProtoMessage()    {}
func (*SimpleFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_selector_5adf71ef05f878ed, []int{4}
}
func (m *SimpleFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimpleFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimpleFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SimpleFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleFilter.Merge(dst, src)
}
func (m *SimpleFilter) XXX_Size() int {
	return m.Size()
}
func (m *SimpleFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleFilter.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleFilter proto.InternalMessageInfo

type isSimpleFilter_Args interface {
	isSimpleFilter_Args()
	MarshalTo([]byte) (int, error)
	Size() int
}

type SimpleFilter_Value struct {
	Value string `protobuf:"bytes,2,opt,name=Value,json=value,proto3,oneof"`
}
type SimpleFilter_FArgs struct {
	FArgs *SimpleFilters `protobuf:"bytes,3,opt,name=FArgs,json=fArgs,oneof"`
}

func (*SimpleFilter_Value) isSimpleFilter_Args() {}
func (*SimpleFilter_FArgs) isSimpleFilter_Args() {}

func (m *SimpleFilter) GetArgs() isSimpleFilter_Args {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *SimpleFilter) GetOp() Operation {
	if m != nil {
		return m.Op
	}
	return Operation_NP
}

func (m *SimpleFilter) GetValue() string {
	if x, ok := m.GetArgs().(*SimpleFilter_Value); ok {
		return x.Value
	}
	return ""
}

func (m *SimpleFilter) GetFArgs() *SimpleFilters {
	if x, ok := m.GetArgs().(*SimpleFilter_FArgs); ok {
		return x.FArgs
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SimpleFilter) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SimpleFilter_OneofMarshaler, _SimpleFilter_OneofUnmarshaler, _SimpleFilter_OneofSizer, []interface{}{
		(*SimpleFilter_Value)(nil),
		(*SimpleFilter_FArgs)(nil),
	}
}

func _SimpleFilter_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SimpleFilter)
	// Args
	switch x := m.Args.(type) {
	case *SimpleFilter_Value:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Value)
	case *SimpleFilter_FArgs:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FArgs); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SimpleFilter.Args has unexpected type %T", x)
	}
	return nil
}

func _SimpleFilter_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SimpleFilter)
	switch tag {
	case 2: // Args.Value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Args = &SimpleFilter_Value{x}
		return true, err
	case 3: // Args.FArgs
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SimpleFilters)
		err := b.DecodeMessage(msg)
		m.Args = &SimpleFilter_FArgs{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SimpleFilter_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SimpleFilter)
	// Args
	switch x := m.Args.(type) {
	case *SimpleFilter_Value:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Value)))
		n += len(x.Value)
	case *SimpleFilter_FArgs:
		s := proto.Size(x.FArgs)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Filter struct {
	Key                  string        `protobuf:"bytes,1,opt,name=Key,json=key,proto3" json:"Key,omitempty"`
	F                    *SimpleFilter `protobuf:"bytes,2,opt,name=F,json=f" json:"F,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Filter) Reset()         { *m = Filter{} }
func (m *Filter) String() string { return proto.CompactTextString(m) }
func (*Filter) ProtoMessage()    {}
func (*Filter) Descriptor() ([]byte, []int) {
	return fileDescriptor_selector_5adf71ef05f878ed, []int{5}
}
func (m *Filter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Filter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Filter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Filter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Filter.Merge(dst, src)
}
func (m *Filter) XXX_Size() int {
	return m.Size()
}
func (m *Filter) XXX_DiscardUnknown() {
	xxx_messageInfo_Filter.DiscardUnknown(m)
}

var xxx_messageInfo_Filter proto.InternalMessageInfo

func (m *Filter) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Filter) GetF() *SimpleFilter {
	if m != nil {
		return m.F
	}
	return nil
}

func init() {
	proto.RegisterType((*PlacementRule)(nil), "netgraph.PlacementRule")
	proto.RegisterType((*SFGroup)(nil), "netgraph.SFGroup")
	proto.RegisterType((*Select)(nil), "netgraph.Select")
	proto.RegisterType((*SimpleFilters)(nil), "netgraph.SimpleFilters")
	proto.RegisterType((*SimpleFilter)(nil), "netgraph.SimpleFilter")
	proto.RegisterType((*Filter)(nil), "netgraph.Filter")
	proto.RegisterEnum("netgraph.Operation", Operation_name, Operation_value)
	proto.RegisterEnum("netgraph.Type", Type_name, Type_value)
}
func (m *PlacementRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlacementRule) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReplFactor != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSelector(dAtA, i, uint64(m.ReplFactor))
	}
	if len(m.SFGroups) > 0 {
		for _, msg := range m.SFGroups {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSelector(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SFGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SFGroup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Filters) > 0 {
		for _, msg := range m.Filters {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSelector(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Selectors) > 0 {
		for _, msg := range m.Selectors {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSelector(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Select) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Select) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSelector(dAtA, i, uint64(m.Count))
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSelector(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SimpleFilters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleFilters) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Filters) > 0 {
		for _, msg := range m.Filters {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSelector(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SimpleFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleFilter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Op != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSelector(dAtA, i, uint64(m.Op))
	}
	if m.Args != nil {
		nn1, err := m.Args.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SimpleFilter_Value) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x12
	i++
	i = encodeVarintSelector(dAtA, i, uint64(len(m.Value)))
	i += copy(dAtA[i:], m.Value)
	return i, nil
}
func (m *SimpleFilter_FArgs) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.FArgs != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSelector(dAtA, i, uint64(m.FArgs.Size()))
		n2, err := m.FArgs.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *Filter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Filter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSelector(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.F != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSelector(dAtA, i, uint64(m.F.Size()))
		n3, err := m.F.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintSelector(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PlacementRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReplFactor != 0 {
		n += 1 + sovSelector(uint64(m.ReplFactor))
	}
	if len(m.SFGroups) > 0 {
		for _, e := range m.SFGroups {
			l = e.Size()
			n += 1 + l + sovSelector(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SFGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Filters) > 0 {
		for _, e := range m.Filters {
			l = e.Size()
			n += 1 + l + sovSelector(uint64(l))
		}
	}
	if len(m.Selectors) > 0 {
		for _, e := range m.Selectors {
			l = e.Size()
			n += 1 + l + sovSelector(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Select) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovSelector(uint64(m.Count))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovSelector(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SimpleFilters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Filters) > 0 {
		for _, e := range m.Filters {
			l = e.Size()
			n += 1 + l + sovSelector(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SimpleFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Op != 0 {
		n += 1 + sovSelector(uint64(m.Op))
	}
	if m.Args != nil {
		n += m.Args.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SimpleFilter_Value) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	n += 1 + l + sovSelector(uint64(l))
	return n
}
func (m *SimpleFilter_FArgs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FArgs != nil {
		l = m.FArgs.Size()
		n += 1 + l + sovSelector(uint64(l))
	}
	return n
}
func (m *Filter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovSelector(uint64(l))
	}
	if m.F != nil {
		l = m.F.Size()
		n += 1 + l + sovSelector(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSelector(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSelector(x uint64) (n int) {
	return sovSelector(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PlacementRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSelector
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlacementRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlacementRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplFactor", wireType)
			}
			m.ReplFactor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplFactor |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SFGroups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSelector
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SFGroups = append(m.SFGroups, SFGroup{})
			if err := m.SFGroups[len(m.SFGroups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSelector(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSelector
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SFGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSelector
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SFGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SFGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSelector
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filters = append(m.Filters, Filter{})
			if err := m.Filters[len(m.Filters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selectors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSelector
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Selectors = append(m.Selectors, Select{})
			if err := m.Selectors[len(m.Selectors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSelector(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSelector
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Select) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSelector
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Select: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Select: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSelector
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSelector(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSelector
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimpleFilters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSelector
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimpleFilters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimpleFilters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSelector
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filters = append(m.Filters, &SimpleFilter{})
			if err := m.Filters[len(m.Filters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSelector(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSelector
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimpleFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSelector
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimpleFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimpleFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			m.Op = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op |= (Operation(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSelector
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = &SimpleFilter_Value{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FArgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSelector
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SimpleFilters{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Args = &SimpleFilter_FArgs{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSelector(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSelector
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Filter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSelector
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Filter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Filter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSelector
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSelector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSelector
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.F == nil {
				m.F = &SimpleFilter{}
			}
			if err := m.F.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSelector(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSelector
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSelector(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSelector
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSelector
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSelector
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSelector
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSelector
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSelector(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSelector = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSelector   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("netgraph/selector.proto", fileDescriptor_selector_5adf71ef05f878ed) }

var fileDescriptor_selector_5adf71ef05f878ed = []byte{
	// 468 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0xc1, 0x6e, 0xd3, 0x4c,
	0x18, 0xf4, 0xda, 0xb1, 0x9d, 0x7c, 0xf9, 0xfb, 0x6b, 0x59, 0x50, 0x6b, 0x71, 0x70, 0x23, 0xc3,
	0x21, 0xea, 0x21, 0xae, 0xd2, 0x3e, 0x00, 0x09, 0xc4, 0x05, 0x81, 0x9a, 0xe2, 0x44, 0xdc, 0x9d,
	0x74, 0xe3, 0x5a, 0x38, 0x5e, 0xb3, 0x5e, 0x57, 0xca, 0x9d, 0x87, 0xe0, 0x91, 0x7a, 0xe4, 0x09,
	0x10, 0x0a, 0x2f, 0x82, 0x76, 0xbd, 0x49, 0x23, 0x01, 0xa7, 0xf1, 0xe7, 0x99, 0xd1, 0xcc, 0x58,
	0x86, 0x93, 0x82, 0x8a, 0x94, 0x27, 0xe5, 0x5d, 0x58, 0xd1, 0x9c, 0x2e, 0x05, 0xe3, 0x83, 0x92,
	0x33, 0xc1, 0x48, 0x7b, 0x47, 0x3c, 0xbf, 0xbc, 0xa7, 0xc5, 0x2d, 0xe3, 0x61, 0x9a, 0x89, 0xbb,
	0x7a, 0x31, 0x58, 0xb2, 0x75, 0x98, 0xb2, 0x94, 0x85, 0x4a, 0xb7, 0xa8, 0x57, 0xea, 0x52, 0x87,
	0x7a, 0x6a, 0xfc, 0xc1, 0x2d, 0x1c, 0xdd, 0xe4, 0xc9, 0x92, 0xae, 0x69, 0x21, 0xe2, 0x3a, 0xa7,
	0xc4, 0x07, 0x88, 0x69, 0x99, 0x47, 0x89, 0x0c, 0xf1, 0x50, 0x0f, 0xf5, 0xed, 0x18, 0xf8, 0xfe,
	0x0d, 0xb9, 0x80, 0xf6, 0x2c, 0xba, 0xe2, 0xac, 0x2e, 0x2b, 0xcf, 0xec, 0x59, 0xfd, 0xee, 0xf0,
	0xc9, 0x60, 0xd7, 0x61, 0xa0, 0x99, 0x71, 0xeb, 0xe1, 0xc7, 0xa9, 0x11, 0xb7, 0x2b, 0x2d, 0x0c,
	0xbe, 0x80, 0xab, 0x29, 0x72, 0x0e, 0x6e, 0x94, 0xe5, 0x82, 0xf2, 0xca, 0x43, 0xca, 0x8e, 0x1f,
	0xed, 0x0d, 0xa1, 0xdd, 0xee, 0xaa, 0x91, 0x91, 0x4b, 0xe8, 0xcc, 0xf4, 0xe8, 0x5d, 0xe4, 0x81,
	0xa7, 0xa1, 0xb4, 0xa7, 0xb3, 0xfb, 0x3a, 0x55, 0x70, 0x0e, 0x4e, 0x43, 0x91, 0x67, 0x60, 0xbf,
	0x66, 0x75, 0x21, 0xf4, 0x18, 0x7b, 0x29, 0x0f, 0x82, 0xc1, 0x7a, 0x4f, 0x37, 0x9e, 0xd9, 0x43,
	0xfd, 0x4e, 0x6c, 0x7d, 0xa6, 0x9b, 0x60, 0x04, 0x47, 0xb3, 0x6c, 0x5d, 0xe6, 0x54, 0xf7, 0xfb,
	0xb3, 0xea, 0xf1, 0x41, 0xec, 0x81, 0x72, 0x5f, 0x35, 0xf8, 0x8a, 0xe0, 0xbf, 0x43, 0x86, 0xbc,
	0x00, 0x73, 0x5a, 0xaa, 0xe0, 0xff, 0x87, 0x4f, 0x1f, 0xdd, 0xd3, 0x92, 0xf2, 0x44, 0x64, 0xac,
	0x88, 0x4d, 0x56, 0x92, 0x63, 0xb0, 0x3f, 0x25, 0x79, 0x4d, 0x9b, 0x32, 0x6f, 0x8d, 0xd8, 0xbe,
	0x97, 0x27, 0x09, 0xc1, 0x8e, 0x46, 0x3c, 0xad, 0x3c, 0xab, 0x87, 0xfa, 0xdd, 0xe1, 0xc9, 0xdf,
	0xd3, 0x2b, 0x69, 0x58, 0x49, 0xdd, 0xd8, 0x81, 0x96, 0xc4, 0xe0, 0x15, 0x38, 0x3a, 0x5f, 0xaf,
	0x44, 0xfb, 0x95, 0xe4, 0x25, 0xa0, 0x48, 0x05, 0xfd, 0x7b, 0x0e, 0x5a, 0x9d, 0xcd, 0xa1, 0xb3,
	0xef, 0x48, 0x1c, 0x30, 0xaf, 0x6f, 0xb0, 0x21, 0x71, 0xf2, 0x11, 0x23, 0x75, 0x4f, 0xb0, 0x29,
	0xf1, 0x6a, 0x8e, 0x2d, 0x85, 0x13, 0xdc, 0x92, 0xf8, 0x61, 0x8e, 0x6d, 0x85, 0x13, 0xec, 0x48,
	0x9c, 0xc6, 0xd8, 0x25, 0x2e, 0x58, 0xa3, 0xeb, 0x37, 0xb8, 0x7d, 0x76, 0x0a, 0xad, 0xf9, 0xa6,
	0xa4, 0x04, 0xc0, 0x99, 0x09, 0x9e, 0x15, 0x29, 0x36, 0x48, 0x17, 0xdc, 0x77, 0x85, 0xa0, 0x29,
	0xe5, 0x18, 0x8d, 0xf1, 0xc3, 0xd6, 0x47, 0xdf, 0xb7, 0x3e, 0xfa, 0xb9, 0xf5, 0xd1, 0xb7, 0x5f,
	0xbe, 0xb1, 0x70, 0xd4, 0x6f, 0x7a, 0xf1, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x8d, 0xdc, 0xc9, 0xc6,
	0x01, 0x03, 0x00, 0x00,
}
